name: F-Droid Repository Updater

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  update-repos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 gitpython pandas tabulate

      - name: Fetch and update F-Droid repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITTOKEN }}
        run: |
          python - <<EOF
          import requests
          from bs4 import BeautifulSoup
          import json
          import os
          from git import Repo
          from datetime import datetime
          import pandas as pd
          from tabulate import tabulate
          import re
          
          def fetch_repos():
              urls = [
                  'https://fdroid.org/repo/',
                  'https://f-droid.org/archive/',
                  'https://guardianproject.info/fdroid/repo/',
                  'https://apt.izzysoft.de/fdroid/repo/',
              ]
              repos = []
              for url in urls:
                  try:
                      response = requests.get(url, timeout=10)
                      soup = BeautifulSoup(response.text, 'html.parser')
                      repo_info = {
                          'name': soup.find('title').text.strip(),
                          'url': url,
                          'last_updated': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                          'app_count': len(soup.find_all('application')),
                          'description': soup.find('description').text.strip() if soup.find('description') else 'N/A'
                      }
                      repos.append(repo_info)
                  except Exception as e:
                      print(f"Error fetching {url}: {str(e)}")
              return repos
          
          def remove_duplicates(repos):
              seen_urls = set()
              unique_repos = []
              for repo in repos:
                  if repo['url'] not in seen_urls:
                      seen_urls.add(repo['url'])
                      unique_repos.append(repo)
              return unique_repos
          
          def update_readme(repos):
              df = pd.DataFrame(repos)
              table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)
              
              with open('README.md', 'r') as f:
                  content = f.read()
              
              start_marker = "<!-- START_FDROID_REPO_TABLE -->"
              end_marker = "<!-- END_FDROID_REPO_TABLE -->"
              
              new_content = re.sub(
                  f"{start_marker}.*?{end_marker}",
                  f"{start_marker}\n\n{table}\n\n{end_marker}",
                  content,
                  flags=re.DOTALL
              )
              
              with open('README.md', 'w') as f:
                  f.write(new_content)
          
          def git_push_changes():
              repo = Repo('.')
              repo.git.add(['README.md'])
              repo.index.commit('Auto-update F-Droid repositories in README')
              origin = repo.remote('origin')
              origin.push()
          
          def main():
              repos = fetch_repos()
              unique_repos = remove_duplicates(repos)
              update_readme(unique_repos)
              git_push_changes()
          
          if __name__ == "__main__":
              main()
          EOF
